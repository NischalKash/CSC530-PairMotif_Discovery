# probability and entropy
function Pro(DNA, motif, n, determine) # DNA, motif, number of candidate motif, whether use prob or entropy
    k = length(motif)
    t = length(DNA)
    l = length(DNA[1])
    c_A = 0
    c_C = 0
    c_G = 0
    c_T = 0
    nucleo = ["ACGT"]
    for i in 1:t
        for j in 1:l
            if DNA[i][j] == nucleo[1][1]
                c_A = c_A + 1 
            elseif DNA[i][j] == nucleo[1][2]
                c_C = c_C + 1
            elseif DNA[i][j] == nucleo[1][3]
                c_G = c_G + 1
            elseif DNA[i][j] == nucleo[1][4]
                c_T = c_T + 1
            end
        end
    end
    pro_A = c_A/(c_A + c_C + c_G + c_T)           # probability of the whole DNA seq
    pro_C = c_C/(c_A + c_C + c_G + c_T)
    pro_G = c_G/(c_A + c_C + c_G + c_T)
    pro_T = c_T/(c_A + c_C + c_G + c_T)
    pro = []
    D = Dict()
    for i in 1:t
        for j in 1:(l-k+1)
            if determine == true                  # calculate probability
                prob = 1
                corr_motif = DNA[i][j:j+(k-1)]
                for h in 1:k
                    if DNA[i][j+h-1] == nucleo[1][1]
                        prob = prob*pro_A
                    elseif DNA[i][j+h-1] == nucleo[1][2]
                        prob = prob*pro_C
                    elseif DNA[i][j+h-1] == nucleo[1][3]
                        prob = prob*pro_G
                    elseif DNA[i][j+h-1] == nucleo[1][4]
                        prob = prob*pro_T
                    end
                end
                push!(pro, prob)
                D = merge(D, Dict([(prob, corr_motif)]))
            else                                  # calculate entropy
                prob = 0
                corr_motif = DNA[i][j:j+(k-1)]
                for h in 1:k
                    if DNA[i][j+h-1] == nucleo[1][1]
                        prob = prob - pro_A*log2(pro_A)
                    elseif DNA[i][j+h-1] == nucleo[1][2]
                        prob = prob - pro_C*log2(pro_C)
                    elseif DNA[i][j+h-1] == nucleo[1][3]
                        prob = prob - pro_G*log2(pro_G)
                    elseif DNA[i][j+h-1] == nucleo[1][4]
                        prob = prob - pro_T*log2(pro_T)
                    end
                end
                push!(pro, prob)
                D = merge(D, Dict([(prob, corr_motif)]))
            end
        end
    end
    cand_motif = []
    pro = unique(pro)
    for i in sort(pro, rev=true)[1:n]
        push!(cand_motif, D[i])
    end
    return(cand_motif)  
end
